name: Production Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY_FRONTEND: hanihome-au-frontend
  ECR_REPOSITORY_BACKEND: hanihome-au-backend

jobs:
  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      frontend-image: ${{ steps.build-frontend.outputs.image }}
      backend-image: ${{ steps.build-backend.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push frontend image
        id: build-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd frontend/hanihome-au
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --push \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest \
            .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        id: build-backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend/hanihome-au-api
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --push \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest \
            .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push-images]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ECS Staging
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster hanihome-au-staging \
            --service hanihome-au-frontend-staging \
            --task-definition hanihome-au-frontend-staging \
            --force-new-deployment

          aws ecs update-service \
            --cluster hanihome-au-staging \
            --service hanihome-au-backend-staging \
            --task-definition hanihome-au-backend-staging \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster hanihome-au-staging \
            --services hanihome-au-frontend-staging hanihome-au-backend-staging

      - name: Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging environment..."
          # Add staging health checks here
          curl -f https://staging.hanihome.com.au/api/v1/actuator/health || exit 1

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push-images, deploy-to-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create deployment
        id: create-deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false
            });
            return deployment.data.id;

      - name: Set deployment status to in progress
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create-deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment started'
            });

      - name: Blue-Green Deployment Setup
        run: |
          echo "Setting up blue-green deployment..."
          
          # Create new target group for green environment
          GREEN_TG_ARN=$(aws elbv2 create-target-group \
            --name hanihome-au-green-$(date +%s) \
            --protocol HTTP \
            --port 8080 \
            --vpc-id ${{ secrets.VPC_ID }} \
            --health-check-path /api/v1/actuator/health \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text)
          
          echo "GREEN_TG_ARN=$GREEN_TG_ARN" >> $GITHUB_ENV

      - name: Deploy to Green Environment
        run: |
          # Update ECS task definitions with new images
          FRONTEND_TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition hanihome-au-frontend-prod \
            --query 'taskDefinition' \
            --output json | jq --arg image "${{ needs.build-and-push-images.outputs.frontend-image }}" \
            '.containerDefinitions[0].image = $image | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)')

          BACKEND_TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition hanihome-au-backend-prod \
            --query 'taskDefinition' \
            --output json | jq --arg image "${{ needs.build-and-push-images.outputs.backend-image }}" \
            '.containerDefinitions[0].image = $image | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)')

          # Register new task definitions
          aws ecs register-task-definition --cli-input-json "$FRONTEND_TASK_DEF"
          aws ecs register-task-definition --cli-input-json "$BACKEND_TASK_DEF"

          # Update services with new task definitions
          aws ecs update-service \
            --cluster hanihome-au-prod \
            --service hanihome-au-frontend-prod \
            --task-definition hanihome-au-frontend-prod \
            --force-new-deployment

          aws ecs update-service \
            --cluster hanihome-au-prod \
            --service hanihome-au-backend-prod \
            --task-definition hanihome-au-backend-prod \
            --force-new-deployment

      - name: Wait for Green Deployment
        run: |
          aws ecs wait services-stable \
            --cluster hanihome-au-prod \
            --services hanihome-au-frontend-prod hanihome-au-backend-prod

      - name: Health Check Green Environment
        run: |
          echo "Performing health checks on green environment..."
          
          # Get the new service endpoints
          BACKEND_IP=$(aws ecs describe-tasks \
            --cluster hanihome-au-prod \
            --tasks $(aws ecs list-tasks --cluster hanihome-au-prod --service-name hanihome-au-backend-prod --query 'taskArns[0]' --output text) \
            --query 'tasks[0].attachments[0].details[?name==`privateIPv4Address`].value' \
            --output text)
          
          # Health check
          curl -f http://$BACKEND_IP:8080/api/v1/actuator/health || exit 1
          
          echo "Green environment health check passed!"

      - name: Switch Traffic to Green
        run: |
          # Get current blue target group
          BLUE_TG_ARN=$(aws elbv2 describe-listeners \
            --load-balancer-arn ${{ secrets.ALB_ARN }} \
            --query 'Listeners[0].DefaultActions[0].TargetGroupArn' \
            --output text)
          
          # Switch traffic to green
          aws elbv2 modify-listener \
            --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=$GREEN_TG_ARN
          
          echo "Traffic switched to green environment"
          echo "BLUE_TG_ARN=$BLUE_TG_ARN" >> $GITHUB_ENV

      - name: Post-Deployment Tests
        run: |
          echo "Running post-deployment tests..."
          
          # Wait for ALB to update
          sleep 30
          
          # Test production endpoint
          curl -f https://hanihome.com.au/api/v1/actuator/health || exit 1
          curl -f https://hanihome.com.au/ || exit 1
          
          echo "Post-deployment tests passed!"

      - name: Clean up Blue Environment
        if: success()
        run: |
          # Wait before cleanup to ensure stability
          sleep 300
          
          # Delete old target group
          aws elbv2 delete-target-group --target-group-arn $BLUE_TG_ARN || true
          
          echo "Blue environment cleaned up"

      - name: Set deployment status to success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create-deployment.outputs.result }},
              state: 'success',
              description: 'Deployment completed successfully',
              environment_url: 'https://hanihome.com.au'
            });

      - name: Set deployment status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create-deployment.outputs.result }},
              state: 'failure',
              description: 'Deployment failed'
            });

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Rolling back deployment..."
          
          # Switch back to blue environment if green deployment failed
          if [ ! -z "$BLUE_TG_ARN" ]; then
            aws elbv2 modify-listener \
              --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
              --default-actions Type=forward,TargetGroupArn=$BLUE_TG_ARN
            echo "Traffic switched back to blue environment"
          fi

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-to-production]
    if: always()
    
    steps:
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy-to-production.result }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v') && needs.deploy-to-production.result == 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release
            
            This release includes the latest changes from the main branch.
            
            ### Deployment Information
            - **Environment**: Production
            - **Commit**: ${{ github.sha }}
            - **Deployed at**: ${{ github.event.head_commit.timestamp }}
            
            ### Health Checks
            - ✅ Backend API: https://hanihome.com.au/api/v1/actuator/health
            - ✅ Frontend: https://hanihome.com.au/
          draft: false
          prerelease: false