name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'

env:
  NODE_VERSION: '18'
  WORKING_DIR: './frontend/hanihome-au'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - '.github/workflows/frontend-ci.yml'

  lint-and-type-check:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run lint

      - name: Run type checking
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run type-check

      - name: Check Prettier formatting
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run format:check

  test:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Run tests
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run test
        env:
          CI: true

      # Uncomment when test coverage is implemented
      # - name: Upload coverage reports
      #   uses: codecov/codecov-action@v3
      #   with:
      #     directory: ${{ env.WORKING_DIR }}/coverage

  build:
    needs: [detect-changes, lint-and-type-check]
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Build application
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.WORKING_DIR }}/.next
          retention-days: 1

  build-docker:
    needs: [detect-changes, build]
    if: needs.detect-changes.outputs.frontend-changed == 'true' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/hanihome-au-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/hanihome-au
          file: ./frontend/hanihome-au/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: [detect-changes, build-docker]
    if: needs.detect-changes.outputs.frontend-changed == 'true' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying frontend to staging environment"
          # Add your staging deployment commands here
          # Example: Deploy to Vercel, Netlify, or AWS S3/CloudFront
        
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Frontend staging deployment completed!\n\nðŸ“± Preview: https://staging-frontend.hanihome-au.com'
            })

  deploy-production:
    needs: [detect-changes, build-docker]
    if: needs.detect-changes.outputs.frontend-changed == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying frontend to production environment"
          # Add your production deployment commands here
          # Example: Deploy to Vercel, Netlify, or AWS S3/CloudFront

      - name: Notify deployment
        run: |
          echo "âœ… Frontend production deployment completed!"
          # Add notification logic (Slack, Discord, etc.)

  security-scan:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Run security audit
        working-directory: ${{ env.WORKING_DIR }}
        run: npm audit --audit-level=high

      - name: Run dependency check
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npx audit-ci --config .audit-ci.json || true
          # Note: Configure .audit-ci.json for your security requirements

  performance-check:
    needs: [detect-changes, build]
    if: needs.detect-changes.outputs.frontend-changed == 'true' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.WORKING_DIR }}/.next

      - name: Analyze bundle size
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npx @next/bundle-analyzer || echo "Bundle analysis completed"

      # Uncomment when Lighthouse CI is configured
      # - name: Run Lighthouse CI
      #   working-directory: ${{ env.WORKING_DIR }}
      #   run: |
      #     npm install -g @lhci/cli
      #     lhci autorun