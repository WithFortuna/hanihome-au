{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 초기 설정 및 개발 환경 구축",
        "description": "Next.js + TypeScript 기반 프론트엔드와 Spring Boot 백엔드 프로젝트 초기 구조를 설정하고 개발 환경을 구축한다.",
        "details": "1. Next.js 13+ with TypeScript 프로젝트 생성 2. Spring Boot 3.x 프로젝트 생성 (JPA, QueryDSL 포함) 3. PostgreSQL 데이터베이스 설정 4. GitHub Actions CI/CD 파이프라인 구성 5. Docker 컨테이너 설정 6. AWS 기본 인프라 설정 (EC2, RDS, S3) 7. 환경변수 및 설정 파일 구성",
        "testStrategy": "개발 환경에서 프론트엔드/백엔드 서버 정상 실행 확인, 데이터베이스 연결 테스트, CI/CD 파이프라인 동작 검증",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Next.js 13+ TypeScript 프론트엔드 프로젝트 초기 설정",
            "description": "Next.js 13 App Router와 TypeScript를 사용한 프론트엔드 프로젝트를 생성하고 기본 구조를 설정한다.",
            "dependencies": [],
            "details": "Next.js 13+ 프로젝트 생성, TypeScript 설정, ESLint/Prettier 구성, Tailwind CSS 또는 스타일링 라이브러리 설정, 기본 폴더 구조 생성 (components, pages, utils, types), package.json 스크립트 설정",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Spring Boot 3.x 백엔드 프로젝트 초기 설정",
            "description": "Spring Boot 3.x 기반 백엔드 프로젝트를 생성하고 JPA, QueryDSL을 포함한 기본 설정을 구성한다.",
            "dependencies": [],
            "details": "Spring Boot 3.x 프로젝트 생성, Spring Data JPA 설정, QueryDSL 의존성 및 설정 추가, 기본 패키지 구조 생성 (controller, service, repository, entity), application.yml 기본 설정, Gradle/Maven 빌드 스크립트 구성",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "PostgreSQL 데이터베이스 설정 및 연동",
            "description": "PostgreSQL 데이터베이스를 설치하고 Spring Boot 애플리케이션과 연동 설정을 구성한다.",
            "dependencies": [
              "1.2"
            ],
            "details": "PostgreSQL 로컬 설치 또는 Docker 컨테이너 설정, 데이터베이스 및 사용자 생성, Spring Boot application.yml에 데이터베이스 연결 설정, JPA DDL 설정, 데이터베이스 마이그레이션 도구 (Flyway 또는 Liquibase) 설정 검토",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Docker 컨테이너화 설정",
            "description": "프론트엔드, 백엔드, 데이터베이스를 위한 Docker 설정과 docker-compose 구성을 생성한다.",
            "dependencies": [
              "1.1",
              "1.2",
              "1.3"
            ],
            "details": "프론트엔드용 Dockerfile 작성, 백엔드용 Dockerfile 작성, PostgreSQL을 포함한 docker-compose.yml 구성, 개발/운영 환경별 Docker 설정 분리, Docker 이미지 최적화 설정, 컨테이너 간 네트워크 연결 설정",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "AWS 기본 인프라 설정",
            "description": "EC2, RDS, S3 등 AWS 기본 인프라를 설정하고 배포 환경을 준비한다.",
            "dependencies": [
              "1.4"
            ],
            "details": "AWS 계정 및 IAM 사용자 설정, EC2 인스턴스 생성 및 보안 그룹 설정, RDS PostgreSQL 인스턴스 생성, S3 버킷 생성 (이미지/파일 저장용), VPC 및 서브넷 구성, ALB (Application Load Balancer) 설정 검토",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "GitHub Actions CI/CD 파이프라인 구성",
            "description": "GitHub Actions를 사용한 자동화된 빌드, 테스트, 배포 파이프라인을 구성한다.",
            "dependencies": [
              "1.4",
              "1.5"
            ],
            "details": "GitHub Actions 워크플로우 파일 작성, 프론트엔드 빌드 및 테스트 파이프라인 설정, 백엔드 빌드 및 테스트 파이프라인 설정, Docker 이미지 빌드 및 푸시 설정, AWS 배포 자동화 설정, 환경별 배포 전략 구성",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "환경 변수 및 설정 파일 구성",
            "description": "개발, 스테이징, 운영 환경별 환경변수와 설정 파일을 구성하고 보안 설정을 적용한다.",
            "dependencies": [
              "1.1",
              "1.2",
              "1.5"
            ],
            "details": "환경별 .env 파일 템플릿 생성, Spring Boot profile별 application.yml 설정, Next.js 환경변수 설정, AWS Secrets Manager 또는 Parameter Store 연동, 민감한 정보 암호화 설정, 환경별 설정값 분리 및 관리 방안 수립",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "사용자 인증 및 권한 관리 시스템 구현",
        "description": "OAuth 2.0을 활용한 회원가입/로그인 기능과 사용자 역할별 권한 관리 시스템을 구현한다.",
        "details": "1. Spring Security + OAuth 2.0 설정 (Google, Apple) 2. JWT 토큰 기반 인증 구현 3. 사용자 엔티티 설계 (임차인/임대인/중개인 역할 구분) 4. Next.js에서 NextAuth.js 설정 5. 보호된 라우트 및 API 엔드포인트 구현 6. 세션 관리 및 토큰 갱신 로직 7. 사용자 프로필 CRUD API 구현",
        "testStrategy": "각 OAuth 제공자별 로그인 테스트, JWT 토큰 검증 테스트, 권한별 API 접근 제어 테스트, 세션 만료 및 갱신 테스트",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Spring Security OAuth 2.0 기본 설정 및 Google/Apple 연동",
            "description": "Spring Security 설정을 통해 OAuth 2.0 인증 플로우를 구성하고 Google과 Apple OAuth 제공자를 연동한다.",
            "dependencies": [],
            "details": "1. Spring Security OAuth2 Client 의존성 추가 2. application.yml에 Google/Apple OAuth 클라이언트 설정 3. SecurityConfig 클래스에서 OAuth2 로그인 설정 4. 사용자 정보 매핑을 위한 CustomOAuth2UserService 구현 5. OAuth 로그인 성공/실패 핸들러 구현 6. CORS 설정으로 프론트엔드 도메인 허용",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "JWT 토큰 생성 및 검증 시스템 구현",
            "description": "JWT 기반 인증을 위한 토큰 생성, 검증, 갱신 로직을 구현한다.",
            "dependencies": [
              "2.1"
            ],
            "details": "1. JWT 라이브러리 설정 (jjwt) 2. JwtTokenProvider 클래스로 토큰 생성/검증 로직 구현 3. Access Token과 Refresh Token 분리 관리 4. 토큰 만료 시간 설정 및 검증 5. JwtAuthenticationFilter로 요청별 토큰 검증 6. 토큰 갱신 API 엔드포인트 구현 7. 토큰 블랙리스트 관리 (Redis 활용)",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "사용자 엔티티 및 역할 기반 권한 시스템 설계",
            "description": "임차인, 임대인, 중개인, 관리자 역할을 구분하는 사용자 엔티티와 권한 관리 시스템을 구현한다.",
            "dependencies": [
              "2.2"
            ],
            "details": "1. User 엔티티에 role 필드 추가 (TENANT, LANDLORD, AGENT, ADMIN) 2. UserRole enum 클래스 정의 3. 권한별 접근 제어를 위한 @PreAuthorize 어노테이션 설정 4. 역할별 메뉴 및 기능 제한 로직 5. 사용자 프로필 정보 엔티티 설계 6. OAuth 사용자 정보와 내부 사용자 정보 매핑 로직",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "NextAuth.js 설정 및 프론트엔드 인증 구현",
            "description": "Next.js 앱에서 NextAuth.js를 활용하여 OAuth 로그인과 세션 관리를 구현한다.",
            "dependencies": [
              "2.3"
            ],
            "details": "1. NextAuth.js 설치 및 기본 설정 2. Google/Apple OAuth 제공자 설정 3. JWT 전략 설정으로 백엔드 토큰과 연동 4. 세션 콜백 함수에서 사용자 역할 정보 포함 5. 로그인/로그아웃 컴포넌트 구현 6. 사용자 세션 상태 관리 (useSession 훅 활용) 7. 로그인 페이지 및 콜백 페이지 구현",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "보호된 라우트 및 API 엔드포인트 구현",
            "description": "인증된 사용자만 접근할 수 있는 페이지와 API를 구현하고 역할별 접근 제어를 적용한다.",
            "dependencies": [
              "2.4"
            ],
            "details": "1. Next.js에서 withAuth HOC 또는 middleware를 활용한 라우트 보호 2. Spring Boot에서 @PreAuthorize로 API 보호 3. 역할별 접근 권한 검증 로직 4. 인증 실패 시 적절한 에러 응답 처리 5. 프론트엔드에서 권한별 UI 렌더링 조건부 처리 6. API 호출 시 Authorization 헤더 자동 포함 설정",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "세션 관리 및 토큰 자동 갱신 시스템 구현",
            "description": "사용자 세션의 생명주기를 관리하고 토큰을 자동으로 갱신하는 시스템을 구현한다.",
            "dependencies": [
              "2.5"
            ],
            "details": "1. Redis를 활용한 세션 저장소 구성 2. Refresh Token 저장 및 관리 로직 3. Access Token 만료 시 자동 갱신 interceptor 구현 4. 세션 만료 시 자동 로그아웃 처리 5. 다중 디바이스 로그인 관리 (기존 세션 무효화 옵션) 6. 비활성 사용자 세션 정리 스케줄러 7. 토큰 탈취 방지를 위한 보안 헤더 설정",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "사용자 프로필 CRUD API 및 보안 강화 구현",
            "description": "사용자 프로필 관리 API를 구현하고 전체 인증 시스템의 보안을 강화한다.",
            "dependencies": [
              "2.6"
            ],
            "details": "1. 사용자 프로필 조회/수정/삭제 API 구현 2. 프로필 이미지 업로드 및 관리 기능 3. 비밀번호 변경 및 2단계 인증 옵션 4. 계정 탈퇴 및 데이터 삭제 기능 5. SQL Injection, XSS 방지 보안 처리 6. Rate Limiting으로 브루트포스 공격 방지 7. 보안 로그 및 감사 추적 시스템 8. HTTPS 강제 및 보안 쿠키 설정",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "인증 시스템 통합 테스트 및 성능 최적화",
            "description": "전체 인증 시스템의 통합 테스트를 수행하고 성능을 최적화한다.",
            "dependencies": [
              "2.7"
            ],
            "details": "1. OAuth 로그인 플로우 자동화 테스트 구현 2. JWT 토큰 생성/검증 성능 테스트 3. 동시 로그인 처리 부하 테스트 4. 세션 저장소 성능 최적화 5. 인증 관련 데이터베이스 쿼리 최적화 6. CDN을 통한 정적 자원 캐싱 설정 7. 보안 취약점 점검 및 개선 8. 모니터링 및 알림 시스템 구성",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "사용자 프로필 관리 기능 구현",
        "description": "사용자 정보 수정, 선호 지역 설정, 프로필 이미지 업로드 등 프로필 관리 기능을 구현한다.",
        "details": "1. 사용자 프로필 엔티티 확장 (이름, 연락처, 선호지역, 프로필 이미지) 2. AWS S3를 활용한 이미지 업로드 서비스 구현 3. 프로필 정보 수정 API 구현 4. Next.js 프로필 관리 페이지 구현 5. 이미지 리사이징 및 최적화 6. 개인정보 보호 설정 기능",
        "testStrategy": "프로필 정보 CRUD 테스트, 이미지 업로드 및 조회 테스트, 개인정보 보호 설정 검증, 파일 크기 및 형식 제한 테스트",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "사용자 프로필 엔티티 확장 및 데이터베이스 스키마 업데이트",
            "description": "기존 사용자 엔티티에 프로필 정보 필드를 추가하고 데이터베이스 스키마를 업데이트합니다.",
            "dependencies": [],
            "details": "User 엔티티에 이름, 연락처, 선호지역, 프로필 이미지 URL, 개인정보 공개 설정 필드를 추가하고, JPA 어노테이션을 설정합니다. 마이그레이션 스크립트를 작성하여 기존 데이터에 영향을 주지 않도록 합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "AWS S3 이미지 업로드 서비스 구현",
            "description": "프로필 이미지를 AWS S3에 업로드하고 관리하는 서비스를 구현합니다.",
            "dependencies": [
              "3.1"
            ],
            "details": "AWS SDK를 사용하여 S3 버킷에 이미지를 업로드하는 서비스를 구현합니다. 파일 크기 제한, 허용 확장자 검증, 고유한 파일명 생성, 이미지 리사이징 및 최적화 기능을 포함합니다. CDN 연동을 위한 CloudFront 설정도 고려합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "프로필 정보 CRUD API 구현",
            "description": "사용자 프로필 정보를 생성, 조회, 수정, 삭제할 수 있는 REST API를 구현합니다.",
            "dependencies": [
              "3.1",
              "3.2"
            ],
            "details": "Spring Boot에서 프로필 관리를 위한 Controller, Service, Repository 계층을 구현합니다. 입력 데이터 검증, 권한 확인, 이미지 업로드 통합, 에러 처리를 포함합니다. 개인정보 보호 설정에 따른 정보 공개 범위 제어 로직을 구현합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Next.js 프로필 관리 페이지 UI 구현",
            "description": "사용자가 프로필 정보를 관리할 수 있는 프론트엔드 페이지를 구현합니다.",
            "dependencies": [
              "3.3"
            ],
            "details": "프로필 정보 표시 및 수정 폼, 이미지 업로드 드래그 앤 드롭 인터페이스, 미리보기 기능을 구현합니다. React Hook Form과 Zod를 사용한 폼 검증, 로딩 상태 관리, 에러 처리를 포함합니다. 반응형 디자인을 적용합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "이미지 처리 및 최적화 시스템 구현",
            "description": "업로드된 이미지를 다양한 크기로 리사이징하고 최적화하는 시스템을 구현합니다.",
            "dependencies": [
              "3.2"
            ],
            "details": "썸네일, 중간 크기, 원본 크기별로 이미지를 자동 생성하고 WebP 포맷으로 변환합니다. AWS Lambda 또는 서버에서 ImageMagick/Sharp 라이브러리를 사용하여 비동기 이미지 처리를 구현합니다. 처리 실패 시 재시도 로직을 포함합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "개인정보 보호 설정 기능 구현",
            "description": "사용자가 개인정보 공개 범위를 설정하고 관리할 수 있는 기능을 구현합니다.",
            "dependencies": [
              "3.3",
              "3.4"
            ],
            "details": "이름, 연락처, 선호지역 등 각 정보별 공개 범위 설정(전체 공개/회원만/비공개)을 구현합니다. 프로필 조회 시 권한에 따른 정보 필터링, 개인정보 처리 방침 동의 관리, GDPR 준수를 위한 데이터 삭제 기능을 포함합니다.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "매물 데이터 모델 및 기본 CRUD API 구현",
        "description": "매물 정보를 저장할 데이터베이스 스키마를 설계하고 기본적인 매물 관리 API를 구현한다.",
        "details": "1. 매물 엔티티 설계 (주소, 가격, 입주일, 매물유형, 옵션 등) 2. 매물 이미지 엔티티 (다중 이미지 지원) 3. JPA Repository 및 QueryDSL 쿼리 구현 4. 매물 CRUD REST API 구현 5. 매물 상태 관리 (활성/비활성/거래완료) 6. 데이터 검증 및 예외 처리 7. API 문서화 (Swagger/OpenAPI)",
        "testStrategy": "매물 CRUD 단위 테스트, 데이터 검증 테스트, 이미지 연관관계 테스트, API 통합 테스트, 성능 테스트",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "매물 엔티티 설계 및 데이터베이스 스키마 구축",
            "description": "매물의 기본 정보(주소, 가격, 입주일, 매물유형, 옵션 등)를 담는 매물 엔티티와 관련 데이터베이스 스키마를 설계하고 구축한다.",
            "dependencies": [],
            "details": "Property 엔티티 설계(address, price, availableDate, propertyType, options, status 등), 인덱스 설계, 제약조건 설정, 매물 상태 관리용 enum 정의, 데이터베이스 마이그레이션 스크립트 작성",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "매물 이미지 엔티티 및 다중 이미지 업로드 시스템 구현",
            "description": "매물당 여러 이미지를 지원하는 이미지 엔티티를 설계하고 S3 연동 다중 이미지 업로드 시스템을 구현한다.",
            "dependencies": [
              "4.1"
            ],
            "details": "PropertyImage 엔티티 설계, 매물-이미지 일대다 관계 매핑, S3 이미지 업로드 서비스 구현, 이미지 리사이징 및 최적화, 이미지 순서 관리, 썸네일 생성 로직",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "JPA Repository 및 QueryDSL 쿼리 구현",
            "description": "매물 데이터 접근을 위한 JPA Repository와 복잡한 검색 조건 처리를 위한 QueryDSL 쿼리를 구현한다.",
            "dependencies": [
              "4.1",
              "4.2"
            ],
            "details": "PropertyRepository 인터페이스 정의, QueryDSL Q클래스 생성, 동적 검색 쿼리 구현(가격대, 지역, 매물유형, 옵션 필터링), 페이징 처리, 정렬 옵션 구현, N+1 문제 해결을 위한 fetch join 적용",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "매물 CRUD REST API 개발",
            "description": "매물의 생성, 조회, 수정, 삭제를 위한 RESTful API 엔드포인트를 개발한다.",
            "dependencies": [
              "4.3"
            ],
            "details": "PropertyController 구현, POST /api/properties (매물 등록), GET /api/properties (매물 목록 조회), GET /api/properties/{id} (매물 상세 조회), PUT /api/properties/{id} (매물 수정), DELETE /api/properties/{id} (매물 삭제), 검색 API 구현",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "데이터 검증 및 예외 처리 시스템 구현",
            "description": "매물 데이터의 유효성 검증과 API 예외 상황에 대한 체계적인 처리 시스템을 구현한다.",
            "dependencies": [
              "4.4"
            ],
            "details": "Bean Validation 어노테이션 적용, 커스텀 유효성 검증기 구현, GlobalExceptionHandler 구현, 에러 응답 DTO 정의, 비즈니스 로직 예외 처리, 로깅 전략 구현",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "매물 상태 관리 및 비즈니스 로직 구현",
            "description": "매물의 상태(활성/비활성/거래완료) 관리와 관련 비즈니스 로직을 구현한다.",
            "dependencies": [
              "4.4"
            ],
            "details": "PropertyStatus enum 정의 및 적용, 상태 변경 로직 구현, 상태별 접근 제어, 매물 활성화/비활성화 API, 거래 완료 처리 로직, 상태 변경 이력 관리",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "API 문서화 및 성능 최적화",
            "description": "Swagger/OpenAPI를 통한 API 문서화와 데이터베이스 쿼리 성능 최적화를 수행한다.",
            "dependencies": [
              "4.5",
              "4.6"
            ],
            "details": "Swagger UI 설정, API 문서 어노테이션 추가, 예시 요청/응답 정의, 데이터베이스 인덱스 최적화, 쿼리 성능 분석, 캐싱 전략 구현, API 응답 시간 모니터링 설정",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Google Maps 연동 및 위치 기반 서비스 구현",
        "description": "Google Maps API를 연동하여 주소 자동완성, 지도 표시, 위치 기반 검색 기능을 구현한다.",
        "details": "1. Google Maps JavaScript API 설정 2. 주소 자동완성 (Google Places API) 구현 3. 지도에 매물 마커 표시 기능 4. 지리적 좌표 저장 및 검색 최적화 5. 거리 기반 매물 필터링 6. 지도 클러스터링 구현 7. 모바일 반응형 지도 인터페이스",
        "testStrategy": "주소 자동완성 정확도 테스트, 지도 마커 표시 테스트, 위치 기반 검색 성능 테스트, 모바일 지도 반응성 테스트",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Google Maps JavaScript API 설정 및 환경 구성",
            "description": "Google Maps API 키 발급, 프로젝트 설정, 기본 지도 컴포넌트 구현",
            "dependencies": [],
            "details": "Google Cloud Console에서 Maps JavaScript API 활성화 및 API 키 생성, 환경변수 설정, Next.js 프로젝트에 @googlemaps/js-api-loader 패키지 설치, 기본 지도 렌더링 컴포넌트 생성, API 키 보안 설정 (도메인 제한, API 제한)",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Google Places API 주소 자동완성 기능 구현",
            "description": "Places Autocomplete API를 활용한 주소 입력 자동완성 시스템 구현",
            "dependencies": [
              "5.1"
            ],
            "details": "Places API 활성화, Autocomplete 컴포넌트 개발, 한국 주소 형식에 맞는 필터링 설정, 선택된 주소의 상세 정보 추출 (좌표, 우편번호, 행정구역), 디바운싱을 통한 API 호출 최적화, 자동완성 결과 캐싱",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "지도 마커 표시 및 클러스터링 구현",
            "description": "매물 위치를 지도에 마커로 표시하고 클러스터링 기능으로 성능 최적화",
            "dependencies": [
              "5.1"
            ],
            "details": "커스텀 마커 아이콘 디자인, 매물 데이터와 연동된 마커 생성, MarkerClusterer 라이브러리 연동, 클러스터 스타일링, 마커 클릭 시 매물 정보 팝업 표시, 대량 마커 처리 성능 최적화, 마커 애니메이션 효과",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "지리적 좌표 저장 및 검색 최적화",
            "description": "위도/경도 데이터베이스 저장 구조 설계 및 지리적 검색 쿼리 최적화",
            "dependencies": [
              "5.2"
            ],
            "details": "PostgreSQL PostGIS 확장 설정, 좌표 데이터 저장을 위한 테이블 스키마 설계, 지리적 인덱스(GIST) 생성, 반경 기반 검색 쿼리 구현, Haversine 공식을 활용한 거리 계산, 좌표 변환 및 정규화 로직",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "거리 기반 매물 필터링 시스템 구현",
            "description": "사용자 위치 기준 거리별 매물 필터링 및 정렬 기능 구현",
            "dependencies": [
              "5.4"
            ],
            "details": "사용자 현재 위치 획득 (Geolocation API), 거리 범위 선택 UI 컴포넌트, 거리 기반 매물 정렬 알고리즘, 실시간 필터링 결과 업데이트, 지도 뷰포트 기반 동적 로딩, 거리 표시 형식화 (km/m 단위)",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "모바일 반응형 지도 인터페이스 구현",
            "description": "모바일 디바이스에 최적화된 지도 UI/UX 및 터치 제스처 지원",
            "dependencies": [
              "5.3"
            ],
            "details": "모바일 화면 크기별 지도 레이아웃 조정, 터치 제스처 (핀치 줌, 드래그) 최적화, 모바일 전용 컨트롤 버튼 디자인, 지도 로딩 속도 최적화 (타일 압축), 오프라인 지도 캐싱 검토, 배터리 사용량 최적화",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "지도 성능 최적화 및 사용자 경험 개선",
            "description": "지도 로딩 성능 향상, 메모리 최적화, 사용자 경험 개선",
            "dependencies": [
              "5.5",
              "5.6"
            ],
            "details": "지도 타일 지연 로딩 구현, 뷰포트 기반 마커 동적 로딩, 메모리 누수 방지 (이벤트 리스너 정리), 지도 상태 관리 최적화, 로딩 스피너 및 스켈레톤 UI, 에러 핸들링 및 재시도 로직, 지도 API 호출 제한 관리",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "매물 등록 및 관리 인터페이스 구현",
        "description": "임대인과 중개인이 매물을 등록하고 관리할 수 있는 사용자 인터페이스를 구현한다.",
        "details": "1. 다단계 매물 등록 폼 구현 2. 드래그앤드롭 이미지 업로드 3. 매물 옵션 체크박스 인터페이스 4. 실시간 주소 검색 및 지도 표시 5. 등록된 매물 관리 대시보드 6. 매물 수정/삭제 기능 7. 매물 상태 변경 (활성/비활성) 8. 이미지 순서 변경 및 썸네일 설정",
        "testStrategy": "매물 등록 플로우 전체 테스트, 이미지 업로드 및 미리보기 테스트, 폼 유효성 검사 테스트, 반응형 UI 테스트",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "review",
        "subtasks": [
          {
            "id": 1,
            "title": "다단계 매물 등록 폼 컴포넌트 구현",
            "description": "매물 기본 정보, 상세 정보, 옵션 선택이 포함된 단계별 폼 컴포넌트를 구현한다.",
            "dependencies": [],
            "details": "React Hook Form과 Yup을 활용한 폼 유효성 검사, 단계별 진행률 표시기, 임시 저장 기능, 반응형 디자인 적용. 매물 유형별 맞춤 폼 필드 표시.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "드래그앤드롭 이미지 업로드 시스템 구현",
            "description": "다중 이미지 업로드, 미리보기, 업로드 진행률을 표시하는 드래그앤드롭 인터페이스를 구현한다.",
            "dependencies": [],
            "details": "react-dropzone 라이브러리 활용, 이미지 압축 및 리사이징, 업로드 진행률 표시, 지원 파일 형식 제한, 최대 용량 체크, S3 직접 업로드 구현.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "이미지 순서 관리 및 썸네일 설정 기능 구현",
            "description": "업로드된 이미지의 순서 변경, 대표 이미지 설정, 삭제 기능을 구현한다.",
            "dependencies": [
              "6.2"
            ],
            "details": "react-beautiful-dnd를 활용한 드래그앤드롭 정렬, 썸네일 미리보기, 이미지 회전/자르기 기능, 이미지 메타데이터 관리, 순서 저장 API 연동.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "실시간 주소 검색 및 지도 연동 구현",
            "description": "다음/카카오 주소 API를 활용한 주소 검색과 지도 표시 기능을 구현한다.",
            "dependencies": [],
            "details": "다음 우편번호 서비스 연동, 카카오맵 API 통합, 주소 자동완성, 위도/경도 좌표 저장, 근처 교통시설 정보 표시, 지도 마커 커스터마이징.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "매물 옵션 및 편의시설 인터페이스 구현",
            "description": "매물의 다양한 옵션과 편의시설을 선택할 수 있는 체크박스 인터페이스를 구현한다.",
            "dependencies": [],
            "details": "카테고리별 옵션 분류, 아이콘 기반 시각적 표시, 선택된 옵션 요약 표시, 옵션별 가격 정보 입력, 커스텀 옵션 추가 기능, 필터링 가능한 구조.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "매물 관리 대시보드 구현",
            "description": "등록된 매물의 현황을 한눈에 볼 수 있는 관리 대시보드를 구현한다.",
            "dependencies": [
              "6.1",
              "6.3",
              "6.5"
            ],
            "details": "매물 목록 테이블, 상태별 필터링, 검색 기능, 조회수/문의수 통계, 매물별 상세 관리 페이지 연결, 일괄 작업 기능, 페이지네이션.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "매물 수정 및 상태 관리 기능 구현",
            "description": "등록된 매물의 정보 수정과 활성/비활성 상태 변경 기능을 구현한다.",
            "dependencies": [
              "6.6"
            ],
            "details": "매물 정보 수정 폼, 상태 토글 스위치, 수정 히스토리 관리, 변경사항 미리보기, 임시 저장 기능, 수정 권한 체크, 상태 변경 알림.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "매물 삭제 및 데이터 관리 기능 구현",
            "description": "매물 삭제, 복구, 완전 삭제 기능과 관련 데이터 정리 작업을 구현한다.",
            "dependencies": [
              "6.6"
            ],
            "details": "소프트 삭제 구현, 삭제 확인 모달, 삭제된 매물 복구 기능, 관련 이미지 정리, 예약/문의 데이터 처리, 삭제 로그 관리, 일정 기간 후 완전 삭제.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "매물 검색 및 필터링 시스템 구현",
        "description": "임차인이 다양한 조건으로 매물을 검색하고 필터링할 수 있는 시스템을 구현한다.",
        "details": "1. 고급 검색 필터 구현 (지역, 가격, 매물유형, 옵션) 2. QueryDSL을 활용한 동적 쿼리 구현 3. 검색 결과 페이징 및 정렬 4. 실시간 검색 결과 업데이트 5. 검색 히스토리 및 저장된 검색 조건 6. 관심 매물 즐겨찾기 기능 7. 검색 성능 최적화 (인덱싱, 캐싱)",
        "testStrategy": "다양한 필터 조합 테스트, 검색 성능 테스트, 페이징 동작 테스트, 즐겨찾기 기능 테스트",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "고급 검색 필터 시스템 구현",
            "description": "지역, 가격대, 매물유형, 옵션 등 다중 필터 조건을 지원하는 검색 인터페이스를 구현한다.",
            "dependencies": [],
            "details": "지역별 계층 구조 필터(시/구/동), 가격 범위 슬라이더, 매물 유형 체크박스(원룸/투룸/오피스텔 등), 옵션 필터(주차/엘리베이터/반려동물 등), 필터 상태 저장 및 초기화 기능, 필터 조합에 따른 실시간 결과 카운트 표시",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "QueryDSL 동적 쿼리 엔진 구현",
            "description": "다양한 검색 조건을 동적으로 조합하여 최적화된 쿼리를 생성하는 QueryDSL 기반 검색 엔진을 구현한다.",
            "dependencies": [
              "7.1"
            ],
            "details": "BooleanBuilder를 활용한 동적 조건 생성, 조인 최적화 전략, 서브쿼리 활용, N+1 문제 해결을 위한 fetch join 적용, 쿼리 성능 모니터링, 복잡한 필터 조합에 대한 쿼리 최적화",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "검색 결과 페이징 및 정렬 시스템 구현",
            "description": "대용량 검색 결과를 효율적으로 페이징하고 다양한 기준으로 정렬할 수 있는 시스템을 구현한다.",
            "dependencies": [
              "7.2"
            ],
            "details": "Cursor 기반 페이징 구현, 무한 스크롤 지원, 정렬 옵션(최신순/가격순/거리순/인기순), 페이징 성능 최적화, 검색 결과 총 개수 효율적 계산, 페이지 캐싱 전략",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "실시간 검색 및 자동완성 기능 구현",
            "description": "타이핑과 동시에 검색 결과를 업데이트하고 검색어 자동완성을 제공하는 실시간 검색 시스템을 구현한다.",
            "dependencies": [
              "7.3"
            ],
            "details": "Debounce를 활용한 실시간 검색, Elasticsearch 또는 Redis를 활용한 자동완성, 검색어 하이라이팅, 인기 검색어 추천, 검색 결과 실시간 업데이트, 타이핑 성능 최적화",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "검색 히스토리 및 저장된 검색 조건 관리",
            "description": "사용자의 검색 기록을 저장하고 자주 사용하는 검색 조건을 저장할 수 있는 기능을 구현한다.",
            "dependencies": [
              "7.4"
            ],
            "details": "검색 히스토리 엔티티 설계, 저장된 검색 조건 CRUD API, 개인정보 보호를 위한 히스토리 보존 기간 설정, 검색 패턴 분석, 빠른 재검색 인터페이스, 히스토리 삭제 및 관리 기능",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "관심 매물 즐겨찾기 시스템 구현",
            "description": "사용자가 관심 있는 매물을 즐겨찾기에 추가하고 관리할 수 있는 시스템을 구현한다.",
            "dependencies": [
              "7.5"
            ],
            "details": "즐겨찾기 엔티티 및 API 구현, 즐겨찾기 토글 인터페이스, 즐겨찾기 목록 관리, 매물 상태 변경 시 알림 기능, 즐겨찾기 카테고리 분류, 공유 기능, 즐겨찾기 통계 및 추천",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "검색 성능 최적화 및 캐싱 시스템 구현",
            "description": "데이터베이스 인덱싱 최적화와 Redis 캐싱을 통해 검색 성능을 향상시키는 시스템을 구현한다.",
            "dependencies": [
              "7.6"
            ],
            "details": "복합 인덱스 설계 및 적용, Redis를 활용한 검색 결과 캐싱, 캐시 무효화 전략, 검색 쿼리 성능 모니터링, 슬로우 쿼리 분석 및 최적화, 검색 통계 수집, 캐시 히트율 모니터링",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "뷰잉 예약 및 알림 시스템 구현",
        "description": "매물 뷰잉 예약 기능과 실시간 알림 시스템을 구현한다.",
        "details": "1. 뷰잉 예약 엔티티 및 API 구현 2. 캘린더 인터페이스 (react-calendar 또는 유사 라이브러리) 3. 예약 가능 시간 관리 시스템 4. Server-Sent Events (SSE) 또는 FCM 푸시 알림 구현 5. 예약 확인/취소 알림 6. 이메일 알림 서비스 연동 7. 예약 충돌 방지 로직",
        "testStrategy": "예약 생성/수정/취소 테스트, 실시간 알림 전송 테스트, 예약 충돌 시나리오 테스트, 알림 전송 실패 복구 테스트",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "뷰잉 예약 엔티티 및 백엔드 API 구현",
            "description": "뷰잉 예약을 위한 데이터베이스 엔티티 설계 및 CRUD API를 구현한다.",
            "dependencies": [],
            "details": "Viewing 엔티티 (예약자, 매물, 예약시간, 상태 등) 설계, JPA Repository 구현, 예약 생성/조회/수정/취소 REST API 개발, 예약 상태 관리 (예약됨/확정/취소/완료), 예약 시간 유효성 검증 로직 구현",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "캘린더 인터페이스 및 예약 가능 시간 관리",
            "description": "사용자가 예약 가능한 시간을 선택할 수 있는 캘린더 UI와 시간 관리 시스템을 구현한다.",
            "dependencies": [
              "8.1"
            ],
            "details": "react-calendar 또는 react-datepicker 라이브러리 설치 및 설정, 예약 가능한 날짜/시간 표시 캘린더 UI 구현, 임대인별 예약 가능 시간 설정 기능, 예약된 시간 비활성화 표시, 시간대별 예약 제한 로직 구현",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "예약 충돌 방지 및 동시성 처리 로직",
            "description": "동시에 같은 시간대 예약을 방지하고 데이터 일관성을 보장하는 로직을 구현한다.",
            "dependencies": [
              "8.1"
            ],
            "details": "낙관적 락킹 또는 비관적 락킹을 통한 동시성 제어, 예약 생성 시 중복 시간 검증 로직, 트랜잭션 처리를 통한 데이터 일관성 보장, 예약 충돌 시 사용자 알림 메시지, 재시도 메커니즘 구현",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Server-Sent Events (SSE) 실시간 알림 시스템",
            "description": "SSE를 활용한 실시간 예약 알림 시스템을 구현한다.",
            "dependencies": [
              "8.1"
            ],
            "details": "Spring Boot에서 SSE 엔드포인트 구현, 클라이언트별 SSE 연결 관리, 예약 생성/변경/취소 시 실시간 알림 전송, Next.js에서 EventSource API를 통한 SSE 수신, 연결 끊김 시 자동 재연결 로직, 알림 큐 관리 시스템",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "FCM 푸시 알림 서비스 연동",
            "description": "Firebase Cloud Messaging을 통한 모바일/웹 푸시 알림을 구현한다.",
            "dependencies": [
              "8.1"
            ],
            "details": "Firebase 프로젝트 설정 및 FCM 서비스 계정 키 구성, Spring Boot에서 FCM SDK 연동, 사용자별 FCM 토큰 관리, 예약 관련 푸시 알림 템플릿 작성, Next.js에서 FCM 토큰 등록 및 알림 수신, 알림 클릭 시 해당 페이지로 이동 처리",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "이메일 알림 서비스 구현",
            "description": "예약 확인, 리마인더, 취소 등의 이메일 알림 서비스를 구현한다.",
            "dependencies": [
              "8.1"
            ],
            "details": "AWS SES 또는 SendGrid 이메일 서비스 연동, 이메일 템플릿 엔진 설정 (Thymeleaf 또는 FreeMarker), 예약 확인/변경/취소 이메일 템플릿 작성, 예약 24시간 전 리마인더 스케줄링, 이메일 전송 실패 시 재시도 로직, 이메일 전송 로그 및 상태 추적",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "통합 알림 관리 시스템 및 사용자 설정",
            "description": "모든 알림 채널을 통합 관리하고 사용자별 알림 설정을 구현한다.",
            "dependencies": [
              "8.4",
              "8.5",
              "8.6"
            ],
            "details": "알림 타입별 사용자 설정 UI (SSE, 푸시, 이메일 각각 on/off), 알림 발송 이력 관리 테이블, 알림 전송 상태 추적 (전송됨/실패/읽음), 사용자별 알림 선호도 저장, 알림 전송 실패 시 대체 채널 사용 로직, 알림 성능 모니터링 및 메트릭 수집",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "거래 프로세스 및 계약 연동 시스템 구현",
        "description": "거래 제안부터 계약 완료까지의 전체 프로세스를 관리하고 외부 계약 플랫폼과 연동한다.",
        "details": "1. 거래 상태 관리 시스템 (제안/협상/승인/완료) 2. 거래 제안 및 협상 인터페이스 3. DocuSign API 연동 또는 유사 전자계약 서비스 4. 계약서 템플릿 관리 5. 거래 히스토리 추적 6. 보증금/임대료 정보 관리 7. 거래 완료 후 매물 상태 자동 업데이트",
        "testStrategy": "거래 플로우 전체 시나리오 테스트, 전자계약 연동 테스트, 상태 변경 로직 테스트, 동시성 처리 테스트",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "거래 상태 관리 시스템 구현",
            "description": "거래의 생명주기를 관리하는 상태 머신과 상태 전환 로직을 구현한다.",
            "dependencies": [],
            "details": "거래 상태 enum 정의 (PROPOSED, NEGOTIATING, APPROVED, CONTRACT_PENDING, COMPLETED, CANCELLED), 상태 전환 규칙 및 검증 로직, 상태별 권한 체크, 상태 변경 이벤트 처리, 동시성 제어를 위한 낙관적 락 적용",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "거래 협상 인터페이스 구현",
            "description": "임대인과 임차인 간의 거래 조건 협상을 위한 UI/UX와 API를 구현한다.",
            "dependencies": [
              "9.1"
            ],
            "details": "거래 제안 생성/수정 폼, 카운터 오퍼 기능, 협상 메시지 교환 인터페이스, 협상 히스토리 타임라인, 자동 협상 만료 처리, 협상 상태별 UI 조건부 렌더링",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "DocuSign API 연동 구현",
            "description": "전자계약 서비스와의 연동을 통해 계약서 생성, 서명, 완료 처리를 자동화한다.",
            "dependencies": [
              "9.2"
            ],
            "details": "DocuSign SDK 설정 및 인증, 계약서 생성 API 연동, 서명 요청 전송, 서명 완료 웹훅 처리, 서명된 계약서 다운로드 및 저장, API 오류 처리 및 재시도 로직",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "계약서 템플릿 관리 시스템 구현",
            "description": "다양한 임대 유형별 계약서 템플릿을 관리하고 동적으로 생성하는 시스템을 구현한다.",
            "dependencies": [],
            "details": "템플릿 엔티티 설계, 템플릿 변수 치환 엔진, 임대 유형별 템플릿 분류, 템플릿 버전 관리, 관리자용 템플릿 편집 인터페이스, 템플릿 미리보기 기능",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "거래 히스토리 추적 시스템 구현",
            "description": "모든 거래 관련 활동을 기록하고 추적할 수 있는 감사 로그 시스템을 구현한다.",
            "dependencies": [
              "9.1"
            ],
            "details": "거래 활동 로그 엔티티 설계, 이벤트 소싱 패턴 적용, 활동 타임라인 조회 API, 거래 진행 상황 대시보드, 로그 검색 및 필터링 기능, 데이터 보관 정책 적용",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "보증금 및 임대료 정보 관리 구현",
            "description": "거래에 포함되는 금융 정보를 안전하게 관리하고 처리하는 시스템을 구현한다.",
            "dependencies": [
              "9.2"
            ],
            "details": "금융 정보 엔티티 설계 및 암호화, 보증금/임대료 계산 로직, 결제 정보 연동 준비, 금융 데이터 검증 규칙, 세금 계산 기능, 금융 정보 접근 권한 관리",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "거래 완료 후 매물 상태 자동 업데이트 구현",
            "description": "거래가 완료되면 관련 매물의 상태를 자동으로 업데이트하는 시스템을 구현한다.",
            "dependencies": [
              "9.3",
              "9.5"
            ],
            "details": "거래 완료 이벤트 리스너, 매물 상태 자동 변경 로직, 연관 매물 처리 (같은 건물의 다른 호수), 거래 완료 알림 발송, 매물 검색 인덱스 업데이트, 상태 변경 실패 시 보상 트랜잭션",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "리뷰 평가 시스템 및 관리자 대시보드 구현",
        "description": "거래 후 리뷰 및 평가 시스템과 전체 플랫폼을 관리할 수 있는 관리자 대시보드를 구현한다.",
        "details": "1. 리뷰 및 평가 엔티티 설계 2. 별점 평가 및 텍스트 리뷰 인터페이스 3. 리뷰 신뢰도 검증 시스템 4. 관리자 대시보드 (매물/회원/거래 통계) 5. 신고 처리 워크플로우 6. CloudWatch 및 Sentry 모니터링 연동 7. 데이터 분석 및 리포팅 기능 8. 스팸 리뷰 필터링",
        "testStrategy": "리뷰 작성/조회 테스트, 관리자 권한 테스트, 통계 데이터 정확성 테스트, 신고 처리 플로우 테스트, 모니터링 알림 테스트",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "리뷰 및 평가 엔티티 설계 및 데이터베이스 스키마 구현",
            "description": "거래 후 리뷰 작성을 위한 Review, Rating, ReviewReport 엔티티를 설계하고 PostgreSQL 데이터베이스 스키마를 구현한다.",
            "dependencies": [],
            "details": "Review 엔티티 (거래 ID, 작성자, 대상자, 별점, 텍스트 리뷰, 작성일시), Rating 엔티티 (카테고리별 평가), ReviewReport 엔티티 (신고 정보) 설계. JPA 엔티티 매핑 및 QueryDSL 설정. 인덱스 최적화 및 데이터 무결성 제약조건 설정.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "리뷰 작성 및 조회 API 구현",
            "description": "사용자가 거래 완료 후 리뷰를 작성하고 조회할 수 있는 RESTful API를 구현한다.",
            "dependencies": [
              "10.1"
            ],
            "details": "POST /api/reviews (리뷰 작성), GET /api/reviews/{userId} (사용자별 리뷰 조회), GET /api/reviews/property/{propertyId} (매물별 리뷰 조회) API 구현. 별점 평가 및 텍스트 리뷰 검증 로직. 중복 리뷰 방지 및 거래 완료 검증.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "리뷰 신뢰도 검증 및 스팸 필터링 시스템 구현",
            "description": "리뷰의 신뢰도를 검증하고 스팸 리뷰를 자동으로 필터링하는 시스템을 구현한다.",
            "dependencies": [
              "10.2"
            ],
            "details": "사용자 활동 기반 신뢰도 점수 계산 알고리즘. 텍스트 분석을 통한 스팸 리뷰 탐지 (금지어 필터링, 반복 패턴 검출). 의심스러운 리뷰 자동 플래깅 시스템. 신뢰도 점수에 따른 리뷰 가중치 적용.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "관리자 대시보드 프론트엔드 구현",
            "description": "전체 플랫폼을 관리할 수 있는 관리자 대시보드의 프론트엔드를 Next.js로 구현한다.",
            "dependencies": [
              "10.1"
            ],
            "details": "대시보드 레이아웃 및 네비게이션 구현. 매물/회원/거래 통계 시각화 (Chart.js 또는 Recharts 사용). 사용자 관리 인터페이스 (검색, 필터링, 상태 변경). 신고 처리 워크플로우 UI. 반응형 디자인 적용.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "관리자 대시보드 백엔드 API 및 통계 분석 구현",
            "description": "관리자 대시보드를 위한 통계 데이터 생성 및 관리 기능 API를 구현한다.",
            "dependencies": [
              "10.4"
            ],
            "details": "대시보드 통계 API (일/주/월별 사용자, 매물, 거래 통계). 사용자 관리 API (검색, 상태 변경, 권한 관리). 매물 관리 API (승인/거부, 상태 변경). 거래 데이터 분석 및 리포팅 API. 배치 작업을 통한 통계 데이터 생성.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "신고 처리 및 콘텐츠 모더레이션 시스템 구현",
            "description": "사용자 신고를 처리하고 콘텐츠를 모더레이션하는 시스템을 구현한다.",
            "dependencies": [
              "10.3",
              "10.5"
            ],
            "details": "신고 접수 API 및 처리 워크플로우 구현. Report 엔티티 설계 (신고 유형, 상태, 처리 내역). 관리자 신고 검토 인터페이스. 자동 조치 규칙 엔진 (신고 누적시 계정 제재). 신고 처리 히스토리 관리.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "CloudWatch 및 Sentry 모니터링 연동 구현",
            "description": "시스템 모니터링을 위한 CloudWatch 메트릭 수집 및 Sentry 에러 추적을 연동한다.",
            "dependencies": [
              "10.6"
            ],
            "details": "Spring Boot Actuator를 통한 CloudWatch 메트릭 전송 설정. 커스텀 메트릭 (리뷰 작성률, 신고 처리율) 생성. Sentry SDK 통합 및 에러 추적 설정. 알림 임계값 설정 및 SNS 연동. 대시보드 성능 모니터링 및 로그 수집.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "데이터 분석 리포팅 및 시스템 최적화",
            "description": "수집된 데이터를 기반으로 비즈니스 인사이트를 제공하는 리포팅 시스템을 구현하고 전반적인 성능을 최적화한다.",
            "dependencies": [
              "10.7"
            ],
            "details": "사용자 행동 분석 리포트 생성. 매물 성과 분석 및 추천 시스템 데이터 준비. 리뷰 트렌드 분석 및 품질 지표 계산. 데이터베이스 쿼리 최적화 및 캐싱 전략 적용. 배치 처리를 통한 정기 리포트 생성 자동화.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-29T15:38:34.302Z",
      "updated": "2025-08-05T23:06:58.361Z",
      "description": "Tasks for master context"
    }
  }
}