plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id "org.sonarqube" version "6.2.0.5505"
	id 'org.owasp.dependencycheck' version '10.0.4'
}

group = 'com.hanihome'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	// OAuth2 and JWT
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	
	// Redis for session management
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	
	// Spring Retry
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework:spring-aspects'
	
	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
	implementation 'com.querydsl:querydsl-core:5.1.0'
	annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	
	// Flyway
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	
	// Swagger/OpenAPI 3
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	
	// Firebase Cloud Messaging
	implementation 'com.google.firebase:firebase-admin:9.2.0'
	
	// Email support
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	
	// Monitoring and Observability
	// Micrometer CloudWatch
	implementation 'io.micrometer:micrometer-registry-cloudwatch2:1.12.1'
	implementation 'software.amazon.awssdk:cloudwatch:2.21.29'
	
	// Sentry integration
	implementation 'io.sentry:sentry-spring-boot-starter-jakarta:7.2.0'
	implementation 'io.sentry:sentry-logback:7.2.0'
	
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	
	// Testing dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
	testImplementation 'org.mockito:mockito-core:5.7.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'
	testImplementation 'org.assertj:assertj-core:3.24.2'
	testImplementation 'org.testcontainers:testcontainers:1.19.3'
	testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
	testImplementation 'org.testcontainers:postgresql:1.19.3'
	testImplementation 'com.github.tomakehurst:wiremock-jre8:3.0.1'
	testImplementation 'com.github.javafaker:javafaker:1.0.2'
	testImplementation 'com.h2database:h2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

// JaCoCo configuration
jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.50
			}
		}
	}
}

// SonarQube configuration
sonar {
	properties {

		property "sonar.projectKey", "WithFortuna_hanihome-au"
		property "sonar.organization", "withfortuna"
		property "sonar.host.url", "https://sonarcloud.io"

		property "sonar.projectName", "HaniHome Australia API"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.core.codeCoveragePlugin", "jacoco"
		property "sonar.language", "java"
		property "sonar.sources", "src/main/java"
		property "sonar.tests", "src/test/java"
		property "sonar.java.binaries", "build/classes/java/main"
		property "sonar.java.test.binaries", "build/classes/java/test"
	}
}

// OWASP Dependency Check configuration
dependencyCheck {
	format = 'HTML'
	outputDirectory = 'build/reports'
	suppressionFile = 'dependency-check-suppressions.xml'
	skipConfigurations = ['compileClasspath', 'testCompileClasspath']
}

// QueryDSL configuration
def querydslDir = "src/main/generated"

// Integration test and QueryDSL configuration
sourceSets {
	main.java.srcDirs += [querydslDir]
	
	integrationTest {
		java {
			compileClasspath += sourceSets.main.output
			runtimeClasspath += sourceSets.main.output
		}
	}
}

configurations {
	integrationTestImplementation.extendsFrom implementation
	integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
	// Integration test dependencies
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
	integrationTestImplementation 'org.testcontainers:junit-jupiter:1.19.3'
	integrationTestImplementation 'org.testcontainers:postgresql:1.19.3'
	integrationTestImplementation 'com.github.tomakehurst:wiremock-jre8:3.0.1'
	integrationTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

task integrationTest(type: Test) {
	description = 'Runs integration tests.'
	group = 'verification'
	
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	shouldRunAfter test
	
	useJUnitPlatform()
}

task localTest(type: Test) {
	description = 'Runs tests with local-test profile for development.'
	group = 'verification'
	
	useJUnitPlatform()
	systemProperty 'spring.profiles.active', 'local-test'
}

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
	file(querydslDir).deleteDir()
}

// Remove Flyway Gradle plugin configuration as we're using Spring Boot integration instead
