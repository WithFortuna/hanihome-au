# HaniHome AU API - Base Configuration
spring:
  application:
    name: hanihome-au-api
  
  # Database Configuration
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/hanihome_au_dev}
    username: ${DATABASE_USERNAME:hanihome_user}
    password: ${DATABASE_PASSWORD:1111}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
#        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        
  # Flyway Migration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    schemas: public,auth,property,transaction,review
    
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:0}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          
  # Security Configuration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            scope:
              - email
              - profile
            redirect-uri: ${GOOGLE_REDIRECT_URI:http://localhost:3000/auth/callback/google}
          kakao:
            client-id: ${KAKAO_CLIENT_ID:your-kakao-client-id}
            client-secret: ${KAKAO_CLIENT_SECRET:your-kakao-client-secret}
            authorization-grant-type: authorization_code
            redirect-uri: ${KAKAO_REDIRECT_URI:http://localhost:3000/auth/callback/kakao}
            client-authentication-method: client_secret_post
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
  
  # File Upload Configuration
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:10MB}
      max-request-size: ${MAX_FILE_SIZE:10MB}
      enabled: true
  # Mail Configuration
  mail:
    host: ${MAIL_HOST:smtp.mailtrap.io}
    port: ${MAIL_PORT:2525}
    username: ${MAIL_USERNAME:username}
    password: ${MAIL_PASSWORD:password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
    from: ${MAIL_FROM:noreply@hanihome.com.au}

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${SERVER_SERVLET_CONTEXT_PATH:/api/v1}
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024

# Management & Actuator
management:
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics,prometheus}
      base-path: /actuator
  endpoint:
    health:
      show-details: ${ACTUATOR_HEALTH_DETAILS:when-authorized}
  metrics:
    export:
      prometheus:
        enabled: true

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:dev-jwt-secret-key-for-development-only}
  expiration: ${JWT_EXPIRATION:86400000}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}

# AWS Configuration
aws:
  region: ${AWS_REGION:ap-southeast-2}
  access-key-id: ${AWS_ACCESS_KEY_ID:}
  secret-access-key: ${AWS_SECRET_ACCESS_KEY:}
  s3:
    bucket-assets: ${AWS_S3_BUCKET_ASSETS:hanihome-au-assets-dev}
    bucket-backups: ${AWS_S3_BUCKET_BACKUPS:hanihome-au-backups-dev} 
    bucket-logs: ${AWS_S3_BUCKET_LOGS:hanihome-au-logs-dev}


# CORS Configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000}
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
  allowed-headers: ${CORS_ALLOWED_HEADERS:Content-Type,Authorization,X-Requested-With}
  allow-credentials: true

# Rate Limiting
rate-limit:
  requests-per-minute: ${RATE_LIMIT_REQUESTS_PER_MINUTE:100}
  burst-size: ${RATE_LIMIT_BURST_SIZE:20}

# File Storage Configuration
app:
  file-storage:
    upload-dir: ${FILE_UPLOAD_DIR:uploads}
    base-url: ${FILE_BASE_URL:http://localhost:8080/files}
    max-file-size: ${MAX_FILE_SIZE:5MB}
    allowed-extensions: ${ALLOWED_FILE_EXTENSIONS:jpg,jpeg,png,gif,webp}
  mail:
    enabled: ${MAIL_ENABLED:true}
    from: ${MAIL_FROM:noreply@hanihome.com.au}
    from-name: ${MAIL_FROM_NAME:HaniHome Australia}
  frontend:
    url: ${FRONTEND_URL:http://localhost:3000}

# Logging Configuration
logging:
  level:
    com.hanihome: ${LOG_LEVEL:DEBUG}
    org.springframework.security: DEBUG
    org.hibernate.SQL: ${DEBUG:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{ISO8601} [%thread] %-5level %logger{36} - %msg%n"

---
# Development Profile
spring:
  config:
    activate:
      on-profile: development
  
  # Development Database Configuration
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    
  # Enable H2 Console for debugging (optional)
  h2:
    console:
      enabled: ${ENABLE_H2_CONSOLE:false}

# Development Logging
logging:
  level:
    com.hanihome: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.springframework.web: DEBUG
    org.springframework.transaction: DEBUG

# Development Management
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

---
# Staging Profile
spring:
  config:
    activate:
      on-profile: staging
      
  # Staging Database Configuration  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    
  # Staging-specific mail settings
  mail:
    properties:
      mail:
        debug: false

# Staging Logging
logging:
  level:
    com.hanihome: INFO
    org.springframework.security: INFO
    org.hibernate.SQL: WARN
    root: INFO
  file:
    name: /var/log/hanihome-au/application-staging.log
    
# Staging Management
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized

---
# Production Profile
spring:
  config:
    activate:
      on-profile: production
      
  # Production Database Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        generate_statistics: false
        
  # Production-specific configurations
  datasource:
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10
      
# Production Logging
logging:
  level:
    com.hanihome: WARN
    org.springframework.security: WARN
    org.hibernate.SQL: ERROR
    org.springframework.web: WARN
    root: WARN
  file:
    name: /var/log/hanihome-au/application-production.log
    max-size: 100MB
    max-history: 30
    
# Production Management (Restricted)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: never
  metrics:
    export:
      cloudwatch:
        enabled: true
        namespace: HaniHomeAU/Production

# Production Server Configuration
server:
  error:
    include-stacktrace: never
    include-message: never
  compression:
    enabled: true